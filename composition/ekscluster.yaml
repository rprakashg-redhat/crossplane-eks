apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ekscluster-stack
spec:
  mode: Pipeline
  pipeline:
  - step: create-resources
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          apiVersion: stacks.aws.kloudstak.io/v1alpha1
          kind: VirtualNetwork
          metadata:
            name: {{ $.observed.composite.resource.spec.networking.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.networking.name }}
          spec:
            region: {{ $.observed.composite.resource.spec.region }}
            availabilityZones: 
            {{ range $az :=  $.observed.composite.resource.spec.availabilityZones }}
            - {{ $az }}
            {{- end }}
            cidr: {{ $.observed.composite.resource.spec.networking.cidr }}
            publicSubnet:
              cidr:
              {{- range $i := $.observed.composite.resource.spec.networking.publicSubnet.cidr }}
              - {{ $i }}
              {{- end }}
            privateSubnet:
              cidr: 
              {{- range $i := $.observed.composite.resource.spec.networking.privateSubnet.cidr }}
              - {{ $i }}
              {{- end }}
              
          ---
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: Cluster
          metadata:
            annotations:
              meta.upbound.io/example-id: eks/v1beta1/Cluster
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}
            name: 
            labels:
              eksclusters.stacks.aws.kloudstack.io/cluster-name: {{ $.observed.composite.resource.metadata.name }}
          spec:
            forProvider:
              enabledClusterLogTypes:
              - api
              - audit
              - authenticator
              - controllerManager
              - scheduler
              region: {{ $.observed.composite.resource.spec.region }}
              roleArnSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/cluster-role: {{ $.observed.composite.resource.metadata.name }}-role
              vpcConfig:
              - subnetIdRefs:
              {{- range $az := $.observed.composite.resource.spec.availabilityZones }}
                - name: {{ $.observed.composite.resource.spec.networking.name}}-private-{{ $az }}
              {{- end }}
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: ClusterAuth
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-auth
            annotations:
              meta.upbound.io/example-id: eks/v1beta1/ClusterAuth
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-auth
          spec:
            forProvider:
              region: {{ $.observed.composite.resource.spec.region }}
              clusterNameSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/cluster-name: {{ $.observed.composite.resource.metadata.name }}
            writeConnectionSecretToRef:
              name: {{ $.observed.composite.resource.metadata.name }}-kubeconfig
              namespace: crossplane-system
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-role
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/Role
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-role
            labels:
              eksclusters.stacks.aws.kloudstack.io/cluster-role: {{ $.observed.composite.resource.metadata.name }}-role
          spec:
            forProvider:
              assumeRolePolicy: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "eks.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                }
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-policy
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/RolePolicyAttachment
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-policy
          spec:
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
              roleSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/cluster-role: {{ $.observed.composite.resource.metadata.name }}-role
            providerConfigRef:
              name: aws-config
          {{- range $i, $group := $.observed.composite.resource.spec.compute.nodeGroups }}
          ---
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: NodeGroup
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-ng
            annotations:
              meta.upbound.io/example-id: eks/v1beta1/NodeGroup
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-ng
          spec:
            forProvider:
              region: {{ $.observed.composite.resource.spec.region }}
              clusterNameSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/cluster-name: {{ $.observed.composite.resource.metadata.name }}
              nodeRoleArnSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/node-role: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
              subnetIdRefs:
              {{- range $i, $az := $.observed.composite.resource.spec.availabilityZones }}
              - name: {{ $.observed.composite.resource.spec.networking.name}}-private-{{ $az }}
              {{- end }}
              scalingConfig:
              - minSize: {{ $group.scaling.minSize }}
                maxSize: {{ $group.scaling.maxSize }}
                desiredSize: {{ $group.scaling.desiredSize }}
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/Role
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
            labels:
              eksclusters.stacks.aws.kloudstack.io/node-role: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role 
          spec:
            forProvider:
              assumeRolePolicy: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "ec2.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                }
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-workernode-policy
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/RolePolicyAttachment
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-workernode-policy
          spec:
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
              roleSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/node-role: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-cni-policy
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/RolePolicyAttachment
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-cni-policy
          spec:
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
              roleSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/node-role: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
            providerConfigRef:
              name: aws-config
          ---
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-ecr-policy
            annotations:
              meta.upbound.io/example-id: iam/v1beta1/RolePolicyAttachment
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-ecr-policy
          spec:
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
              roleSelector:
                matchLabels:
                  eksclusters.stacks.aws.kloudstack.io/node-role: {{ $.observed.composite.resource.metadata.name }}-{{ $group.name }}-role
            providerConfigRef:
              name: aws-config
          
          {{- end }}

  compositeTypeRef:
    apiVersion: stacks.aws.kloudstak.io/v1alpha1
    kind: EKSCluster